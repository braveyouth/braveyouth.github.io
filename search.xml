<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>幸存者偏差</title>
    <url>/2020/04/09/%E5%B9%B8%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE/</url>
    <content><![CDATA[<h2 id="幸存者偏差"><a href="#幸存者偏差" class="headerlink" title="幸存者偏差"></a>幸存者偏差</h2><p><img src="2020-04-09-%E5%B9%B8%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE.assets/640-1586445889860.webp" alt="img"></p>
<h3 id="一、-简单了解幸存者偏差概念"><a href="#一、-简单了解幸存者偏差概念" class="headerlink" title="一、 简单了解幸存者偏差概念"></a>一、 简单了解幸存者偏差概念</h3><p> 幸存者偏差（Survivor bias），另译为 “生存者偏差” 或 “存活者偏差”，是一种常见的逻辑谬误。指的是<strong>只能看到经过某种筛选而产生的结果，而没有意识到筛选的过程，因此忽略了被筛选掉的关键信息。</strong> <a id="more"></a></p>
<p>是不是有点点懵逼，下面通过故事来理解一下这个概念。</p>
<p>幸存者偏差最早来源于第二次世界大战期间，美国哥伦比亚大学统计学亚伯拉罕·沃德教授接受美国海军要求，运用他在统计方面的专业知识给出关于“飞机应该如何加强防护，才能降低被炮火击落的几率”的建议。</p>
<p>通过统计发现主要受损部位集中在机翼，所以结论是应当减少机腹的装甲加强机翼的装甲？这个结论显然是可笑的，造成这种偏差的原因是机腹中弹的灰机大多数都坠毁了，统计结论产生了偏差，这个偏差被命名为“幸存者偏差”。</p>
<p>现在对于概念是不是有一个直观的看法？没有？</p>
<p>那好，坐好小板凳，我们再来看看下面的栗子~</p>
<h3 id="二、-理论结合实际解释幸存者偏差"><a href="#二、-理论结合实际解释幸存者偏差" class="headerlink" title="二、 理论结合实际解释幸存者偏差"></a>二、 理论结合实际解释幸存者偏差</h3><blockquote>
<p>一名记者来到火车站台上，随机询问：“请问你买到火车票了吗？”<br>一位大妈微微一愣，回答：“买到了”<br>记者又转向一位精瘦精瘦的年轻人，问：“请问你买到火车票了吗？”<br>年轻人回答：“买到了”<br>随后记者又问了5个人，大家都回答：“买到了”<br>最后记者对着镜头说：“今年虽然火车票难买，但是通过采访我们发现，大家都买到了火车票，现在正满怀希望地赶回家乡，过个团圆年！”</p>
</blockquote>
<p>还没买到票的朋友是不是会问候记者，自己是被代表了吗?哈哈哈~</p>
<p><img src="2020-04-09-%E5%B9%B8%E5%AD%98%E8%80%85%E5%81%8F%E5%B7%AE.assets/813494-98497f095a147532-1586445889861.webp" alt=""></p>
<p> <strong>当我们分析问题所依赖信息全部或者大部分来自于“显著的信息”，较少利用“不显著的信息”甚至忽略“沉默的信息”，得出的结论与事实情况就可能存在巨大偏差。</strong> </p>
<h3 id="三、-了解幸存者偏差的重要性"><a href="#三、-了解幸存者偏差的重要性" class="headerlink" title="三、 了解幸存者偏差的重要性"></a>三、 了解幸存者偏差的重要性</h3><p>幸存者偏差实质上是一个思维陷阱，如果仅仅只对人生中的一些无关紧要的事情产生影响，似乎就无需过多关注，但现实中，其实这种<strong>幸存者偏差明显更偏好于我们面临的重大人生选择以及工作决策</strong>。</p>
<p>这些情况，如果被幸存者偏差这个陷阱蒙蔽了，做出了错误的决策，那很有可能会抱憾终身，毕竟人生有时选择是大于努力的。</p>
<p>所以了解这个概念，会让我们在遇到重大决策前， 能够全面客观冷静的去分析各个可能，不会出现太大的失误，这对于我们来说是真的很重要。</p>
<p>相信很多人都听过读书无用论，很多老板都是小学学历，而实际情况是，这些能出人头地的“小学老板”是非常少见的，更多的还在底层打工呢。</p>
<p>但是这些底层打工的人不会跳出来的，所以我们看到的永远是那些被过分渲染的“小学老板”，也因此会导致我们产生了上学没用这样的错误印象。这也会对一些人的人生选择产生误导，到时候就会更加悔恨当初的决定是多么傻。</p>
<h3 id="四、如何避免幸存者偏差"><a href="#四、如何避免幸存者偏差" class="headerlink" title="四、如何避免幸存者偏差"></a>四、如何避免幸存者偏差</h3><p>细想一下，<strong>出现幸存者偏差，不过是以偏概全，忽视了别的信息</strong>，正如我们想一个问题时，陷进死胡同就会放弃，却很少会去反过来想想，再推导。</p>
<p>逆向思考就可以打开我们的新视野，看到别人没有看到的东西，了解到别人忽略掉的问题。</p>
<p>我们知道很多摄影者在拍集体照时总是先数“3、2、1”，可是尽管我们都尽量睁大了眼睛，但总会有些人在数到1的时候坚持不住眨了眼，最后出来的照片就会有闭眼的情况，不管何时看到，都是心塞塞呀~</p>
<p>但是,我们也知道总会有那么一小搓神奇的人，他们可以坚持比我们大多数人长的时间不用眨眼，那他们在拍照时不闭眼更是小case了，这个其实因人而异的，而且他们是少数，并非多数，不具代表性，那如果要解决这个问题，应该怎么做呢？</p>
<p>后来有个人出了个主意，大家将信将疑，甚至还觉得有点怪异，可是照片拍出来以后一看，果然一个闭眼的都没有，先停一下，别往下刷，你试试你能想出好主意吗？</p>
<hr>
<p>⏫</p>
<p>多思考一下呀呀呀<del>~</del></p>
<p>⏬</p>
<hr>
<p>看你的思考是不是和我的一样，我们来回顾一下正常的思考路径：</p>
<p>“使大家在按下快门前不眨眼”是我们的研究对象；</p>
<p>我们先按正常思路想是不是会局限在如何睁大眼睛以保证拍的那刻眼睛没有闭上，这时估计可能就会出现各种各样奇葩的撑住眼皮的方法了，但是都不科学。</p>
<p>因为人的眼睛睁得久了就是需要通过眨眼来补充水分，这是所谓的天性嘛，就像打呵欠、打喷嚏，你说你能控制么？而且撑眼皮行不通的，拍出来也不好看呀。</p>
<p>针对这一问题，我们从正面想就是：如何一直保持睁着眼睛；</p>
<p>从反面想那就是不长时间保持眼睛睁开，也就是闭上眼睛。</p>
<p> 按照这个反面思路，答案就出来了：<strong>新办法是让大家都闭上眼睛，喊“3、2、1”后再一起睁眼。那么拍出来的照片大家就都是睁着眼睛的。</strong></p>
<p>你说这个逆思维是不是用的很妙。它针对的无论是否有特异功能可以长时间不闭眼还是一帮普通人隔几秒钟就要闭下眼补充水分的人，都是一个很好的解决方案，考虑的很全面，也是通过逆思维方式完美避开了幸存者偏差这个思维陷阱。</p>
<p>这样我们也就不会通过<strong>一小部分人可以长时间不闭眼</strong>而得出<strong>人长时间不闭眼是可以的</strong>这种错误结论，因为它没考虑到其他做不到的人呀，那些做不到的就属于“沉默的信息”。</p>
<p>希望此文对你有帮助。</p>
<hr>
<p>好，以上呢为大家利用黄金思维圈法则介绍完了这个幸存者偏差概念，包括了<strong>这个概念是什么，为什么这个概念很重要，以及我们如何避免这个概念影响到我们</strong>，具体细分为以下几步：</p>
<blockquote>
<p>第一步 用专业名词解释与轰炸机遭受攻击后的数据铁统计的故事相结合，让大家简单了解幸存者偏差概念；</p>
<p>第二步 通过记者车厢采访是否有买到票告诉大家什么是幸存者偏差概念；</p>
<p>第三步 用上学无用论来说明为什么了解幸存者偏差概念对我们很重要；</p>
<p>第四步 用拍照如何让大家都睁眼的例子教大家利用逆思维法在生活工作中避免幸存者偏差。</p>
</blockquote>
<p>总结完毕。</p>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>认知偏差</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境</title>
    <url>/2020/04/09/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h2><a id="more"></a>

<p>win+R，打开运行窗口，输入cmd，进入DOS操作窗口</p>
<blockquote>
<p><strong>常用命令：</strong><br>切换盘符：<code>盘符名：</code><br>查看当前文件夹：<code>dir</code><br>进入文件夹：<code>cd 文件夹名</code><br>退出文件夹：<code>cd ../</code><br>退出到当前文件夹根目录：<code>cd \</code><br>清屏：<code>cls</code></p>
</blockquote>
<h2 id="JAVA语言开发环境"><a href="#JAVA语言开发环境" class="headerlink" title="JAVA语言开发环境"></a>JAVA语言开发环境</h2><ul>
<li>下载： <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a> </li>
<li>安装：next就可以，安装位置可以自己修改</li>
<li>JAVA_HOME环境变量配置<ul>
<li>win+S，搜索<strong>查看高级系统设置</strong>或资源管理器于此电脑右键<strong>属性</strong>，点击<strong>高级系统设置</strong>，进入系统属性窗口</li>
<li>点击<strong>高级</strong>选项卡下的<strong>环境变量</strong>按钮，进入环境变量窗口</li>
<li>点击系统变量下的<strong>新建</strong>按钮 ，创建新的环境变量，变量名输入<code>JAVA_HOME</code> ，变量值浏览jdk安装目录<code>D:\Develop\Java\jdk1.8.0_202</code>，点击确定</li>
<li>选择<code>Path</code>环境变量，双击或者点击<strong>编辑</strong>按钮，进去编辑环境变量窗口</li>
<li>点击<strong>新建</strong>按钮，输入<code>%JAVA_HOME%\bin</code>，点击<strong>确定</strong>按钮</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>环境变量配置的作用：</strong></p>
<ul>
<li>开发Java程序，需要使用JDK中提供的工具，工具在JDK8安装目录的 bin 目录下</li>
<li>在DOS命令行下使用这些工具，就要先进入到JDK的bin目录下，这个过程就会非常的麻烦；不进入JDK的 bin 目录，这些工具就不能使用，会报错</li>
<li>为了开发方便，我们想在任意的目录下都可以使用JDK的开发工具，则必须要配置环境变量，配置环境变量的意义，在于告诉操作系统，我们使用的JDK开发工具在哪个目录下</li>
</ul>
</blockquote>
<h2 id="IntelliJ-IDEA开发工具"><a href="#IntelliJ-IDEA开发工具" class="headerlink" title="IntelliJ IDEA开发工具"></a>IntelliJ IDEA开发工具</h2><ul>
<li><p>下载： <a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows" target="_blank" rel="noopener">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a> </p>
</li>
<li><p>安装破解</p>
<ul>
<li>安装<ul>
<li>双击ideaIU-2017.3.4.exe应用程序，点击next，选择安装文件夹再点next</li>
<li>只勾选64-bit launcher选项，点击next</li>
<li>点击install等待安装完成</li>
<li>安装完成，直接点击Finish，不要勾选Run IntelliJ IDEA，完成后也不要运行程序，这会导致无法破解</li>
</ul>
</li>
<li>破解<ul>
<li>复制破解文件<code>JetbrainsCrack-2.8-release-enc.jar</code>到安装目录bin文件夹下</li>
<li>64位操作系统编辑<code>idea64.exe.vmoptions</code>文件，在最后一行加上<br><code>-javaagent:D:\Develop\IntelliJ IDEA 2017.3.4\bin\JetbrainsCrack-2.8-release-enc.jar</code></li>
<li>打开软件，选择<strong>Do not import settings</strong>，点击ok，选择<strong>Activation code</strong>，将注册码.txt里面的破解文件复制粘贴进去，点击ok，然后一路next就好</li>
</ul>
</li>
</ul>
</li>
<li><p>使用</p>
</li>
<li><p>问题</p>
<ul>
<li><p>类文件中import不成功，为灰色</p>
<p>解决方案：</p>
<ul>
<li>先关闭idea，删除项目文件夹中的.idea和.iml文件，重新打开idea编译</li>
<li>点击Invalidate Caches/Restart</li>
</ul>
</li>
</ul>
</li>
<li><p>卸载</p>
</li>
</ul>
<h2 id="MySQL关系型数据库"><a href="#MySQL关系型数据库" class="headerlink" title="MySQL关系型数据库"></a>MySQL关系型数据库</h2><ul>
<li>下载</li>
<li>安装<ul>
<li>MySql5.5<ul>
<li>双击mysql-5.5.40-win64.msi进行安装</li>
</ul>
</li>
</ul>
</li>
<li>使用<ul>
<li>启动MySQL服务<ul>
<li>win+R，输入services.msc，打开服务窗口，右键MySQL55启动服务</li>
<li>以管理员身份运行命令提示符，输入<code>net start mysql</code>启动mysql服务，输入<code>net stop mysql</code>关闭mysql服务</li>
</ul>
</li>
<li>登录MySQL<ul>
<li>mysql -uroot -p密码</li>
<li>mysql -hip -uroot -p连接目标的密码</li>
<li>mysql –host=ip –user=root –password=连接目标的密码</li>
</ul>
</li>
<li>退出MySQL<ul>
<li>输入exit</li>
<li>输入quit</li>
</ul>
</li>
</ul>
</li>
<li>卸载<ul>
<li>MySQL5.5<ul>
<li>去mysql的安装目录找到my.ini文件 ,复制 <code>datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;</code></li>
<li>卸载MySQL</li>
<li>删除C:/ProgramData目录下的MySQL文件夹</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h2><ul>
<li><p>下载： <a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a> </p>
</li>
<li><p>安装：解压压缩包，安装路径建议不要有中文和空格</p>
</li>
<li><p>使用</p>
<ul>
<li><p>启动服务</p>
<p>bin/startup.bat，双击运行该文件即可</p>
</li>
<li><p>访问：浏览器输入<code>http://localhost:8080</code>回车访问自己</p>
<pre><code>`http://远程ip:8080`回车访问别人</code></pre><blockquote>
<p>可能遇到的问题：</p>
<ol>
<li>黑窗口一闪而过<br>原因：没有正确配置JAVA_HOME环境变量<br>解决方案：正确配置JAVA_HOME环境变量</li>
<li>启动报错<ul>
<li>暴力：找到占用端口号，并且找到对应的进程，杀死该进程</li>
<li>温柔：修改自身端口号<br>打开/conf/server.xml，<code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code>,一般将tomcat默认端口号修改为80，80端口号是http协议的默认端口号，好处在于访问时不用在ip地址后面加上端口</li>
</ul>
</li>
</ol>
</blockquote>
</li>
<li><p>关闭服务</p>
<ul>
<li><p>正常关闭</p>
<p>1.bin/startup.bat启动服务窗口按住ctrl+c<br>2.bin/shutdown.bat，双击运行改文件</p>
</li>
<li><p>强制关闭：点击启动服务窗口X</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>配置</p>
<ul>
<li><p>部署项目的方式</p>
<ul>
<li><p>直接将项目放到webapps目录下，/hello：项目的访问路径‐‐&gt;虚拟目录 </p>
<blockquote>
<p>简化部署：将项目打成一个war包，再将war包放置到webapps目录下，war包会自动解压缩</p>
</blockquote>
</li>
<li><p>配置conf/server.xml文件 ，在<code>&lt;Host&gt;</code>标签体中配置 <code>&lt;Context docBase=&quot;D:\hello&quot; path=&quot;/hehe&quot; /&gt;</code>，其中docBase指项目存放的路径，path指虚拟目录</p>
</li>
<li><p>在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写<code>&lt;Context docBase=&quot;D:\hello&quot; /&gt;</code>，虚拟目录就是xml文件的名称</p>
</li>
</ul>
</li>
<li><p>静态项目和动态项目</p>
<p>Java动态项目目录结构</p>
<blockquote>
<p>项目的根目录</p>
<blockquote>
<p>WEB-INF目录</p>
<blockquote>
<p>web.xml：web项目的核心配置文件<br>classes目录：放置字节码文件的目录<br>lib目录：放置依赖的jar包</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li><p>将Tomcat集成到IDEA中，并且创建JavaEE项目，部署项目</p>
<blockquote>
<ul>
<li>IDEA会为每一个Tomcat部署的项目单独建立一份配置文件：查看控制台的log，Using CATALINA_BASE，<code>C:\Users\zhangy\.IntelliJIdea2017.3\system\tomcat</code></li>
<li>工作空间项目和tomcat部署的web项目：tomcat真正访问的是“tomcat部署的web项目”，”tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源 ，WEB‐INF目录下的资源不能被浏览器直接访问</li>
<li>断点调试：使用“小虫子”debug启动项目</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>卸载：删除解压缩包</p>
</li>
</ul>
<h2 id="Redis非关系型数据库"><a href="#Redis非关系型数据库" class="headerlink" title="Redis非关系型数据库"></a>Redis非关系型数据库</h2><ul>
<li>下载<ul>
<li>官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></li>
<li>中文网：<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">http://www.redis.net.cn/</a></li>
</ul>
</li>
<li>安装：解压压缩包，安装路径建议不要有中文和空格</li>
<li>使用</li>
<li>卸载：删除解压缩包</li>
</ul>
<h2 id="MongoDB非关系型数据库"><a href="#MongoDB非关系型数据库" class="headerlink" title="MongoDB非关系型数据库"></a>MongoDB非关系型数据库</h2><ul>
<li><p>下载</p>
</li>
<li><p>安装</p>
</li>
<li><p>使用</p>
<ul>
<li><p>MongoDB导入文件夹(内含json和bson文件)</p>
<ul>
<li><p>使用mongo命令将数据库删除</p>
<p>mongo命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use db_name;</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>导入（指定文件夹）数据</p>
<ul>
<li><p>linux命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mongorestore -d db_name 文件夹目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongorestore.exe -d db_name 文件夹目录</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>卸载</p>
</li>
</ul>
<h2 id="Maven项目管理工具"><a href="#Maven项目管理工具" class="headerlink" title="Maven项目管理工具"></a>Maven项目管理工具</h2><ul>
<li>下载</li>
<li>安装</li>
<li>使用</li>
<li>卸载</li>
</ul>
<h2 id="Git版本控制工具"><a href="#Git版本控制工具" class="headerlink" title="Git版本控制工具"></a>Git版本控制工具</h2><ul>
<li><p>下载：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p>
</li>
<li><p>安装</p>
<ul>
<li><p>安装git for windows(Git-2.13.0-64-bit.exe)</p>
<ul>
<li><p>next就可以，安装位置可以自己修改</p>
</li>
<li><p>需要设置，命令行输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your Name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>安装TortoiseGit(TortoiseGit-2.4.0.2-64bit.msi)</p>
<ul>
<li><p>next就可以，安装位置可以自己修改</p>
</li>
<li><p>默认选项下启动配置画面，language选择English,点击下一步</p>
</li>
<li><p>配置git.exe，选择安装git for windows目录下\Git\bin，点击下一步</p>
</li>
<li><p>配置开发者姓名及邮箱，每次提交代码时都会把此信息包含到提交的信息中，点击下一步</p>
</li>
<li><p>使用默认配置，点击“完成”按钮完成配置</p>
</li>
</ul>
</li>
<li><p>安装中文语言包(TortoiseGit-LanguagePack-2.4.0.0-64bit-zh_CN.msi)</p>
<ul>
<li>next就可以，安装位置可以自己修改</li>
<li>语言包安装完毕后可以在TortoiseGit设置中设置语言</li>
</ul>
</li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li><p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 文件名//查看文件内容</span><br><span class="line">git rm 文件名//删除文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建版本库</p>
<ul>
<li><p>创建一个空目录 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir learngit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> learngit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>pwd</code>命令用于显示当前目录</p>
</blockquote>
</li>
<li><p>初始化目录为Git可以管理的仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时当前目录下就会生成一个.git目录，这个目录是Git用来跟踪管理版本库的。如果没有看到.git目录，因为这个目录默认是隐藏的，使用<code>ls -ah</code>命令就可以看到了</p>
</blockquote>
</li>
</ul>
</li>
<li><p>添加文件到版本库</p>
<ul>
<li><p>添加文件到仓库( 将文件修改添加到暂存区 )</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add &lt;file1&gt; &lt;file2&gt;..</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可反复多次使用，添加多个文件</p>
</blockquote>
</li>
<li><p>提交文件到仓库（ 把暂存区的所有内容提交到当前分支 ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m &lt;message&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><message>为本次提交说明，例如”first commit”</p>
</blockquote>
</li>
</ul>
</li>
<li><p>查看仓库状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看修改内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff filename//比较工作区和暂存区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD -- filename//比较工作区和版本库的最新版本</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>版本回退</p>
<ul>
<li><p>查看提交日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline//查看当前最近到最初的版本提交历史</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>回退版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD~n</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard commit_id//通过历史节点切换到任意阶段</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上一个版本HEAD^，上上一个版本HEAD^^；上一个版本HEAD<del>1，上上个版本HEAD</del>2<br>commit_id为git log –pretty=oneline查看时第一列的值，此时只需要输入前几位就可以切到这个版本</p>
</blockquote>
</li>
<li><p>查看命令历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog//任意阶段历史节点</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>切换分支</p>
<ul>
<li><p>查看本地分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看远程分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b 本地分支命名 origin/远程分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 本地分支名称</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>问题</p>
<ul>
<li><p>git clone命令从github克隆源码到电脑时出现了以下问题 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure>

<ul>
<li><p>原因1：缓存区溢出<br>解决办法：加大缓存区，将curl的postBuffer设置为500M,命令行输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000//配置命令</span><br><span class="line"></span><br><span class="line">git config --list//查看配置信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>原因2：网络下载速度缓慢<br>解决办法：1.切换网络下载<br>2.修改网络配置，命令行输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.lowSpeedLimit 0</span><br><span class="line">git config --global http.lowSpeedTime 999999</span><br></pre></td></tr></table></figure>

<p>3.首先浅层clone，然后更新远程库到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//–depth 1的含义是复制深度为1，就是每个文件只取最近一次提交，不是整个历史版本</span><br><span class="line">git clone --depth=1 http://gitlab.xxx.cn/yyy/zzz.git</span><br><span class="line">git fetch --unshallow</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>卸载</p>
</li>
</ul>
<h2 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h2>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
      </tags>
  </entry>
</search>
